#include <chrono>
#include <vector>
#include <string>

#ifndef PROMISEDYNTRACER_TIMER_H
#define PROMISEDYNTRACER_TIMER_H

namespace timing {

    enum segment {
        FUNCTION_ENTRY_RECORDER = 0,
        FUNCTION_ENTRY_RECORDER_OTHER,
        FUNCTION_ENTRY_RECORDER_FUNCTION_ID,
        FUNCTION_ENTRY_RECORDER_CALL_ID,
        FUNCTION_ENTRY_RECORDER_PARENT_ID,
        FUNCTION_ENTRY_RECORDER_LOCATION,
        FUNCTION_ENTRY_RECORDER_EXPRESSION,
        FUNCTION_ENTRY_RECORDER_NAME,
        FUNCTION_ENTRY_RECORDER_ARGUMENTS,
        FUNCTION_ENTRY_RECORDER_DEFINITION,
        FUNCTION_ENTRY_RECORDER_RECURSIVE,
        FUNCTION_ENTRY_RECORDER_PARENT_PROMISE,

        FUNCTION_ENTRY_STACK,
        FUNCTION_ENTRY_WRITE_TRACE,

        FUNCTION_ENTRY_WRITE_SQL,
        FUNCTION_ENTRY_WRITE_SQL_RECORDKEEPING,
        FUNCTION_ENTRY_WRITE_SQL_BIND,
        FUNCTION_ENTRY_WRITE_SQL_EXECUTE,

        FUNCTION_EXIT_RECORDER,
        FUNCTION_EXIT_RECORDER_OTHER,
        FUNCTION_EXIT_RECORDER_FUNCTION_ID,
        FUNCTION_EXIT_RECORDER_CALL_ID,
        FUNCTION_EXIT_RECORDER_PARENT_ID,
        FUNCTION_EXIT_RECORDER_LOCATION,
        FUNCTION_EXIT_RECORDER_EXPRESSION,
        FUNCTION_EXIT_RECORDER_NAME,
        FUNCTION_EXIT_RECORDER_ARGUMENTS,
        FUNCTION_EXIT_RECORDER_DEFINITION,
        FUNCTION_EXIT_RECORDER_RECURSIVE,
        FUNCTION_EXIT_RECORDER_PARENT_PROMISE,

        FUNCTION_EXIT_STACK,
        FUNCTION_EXIT_WRITE_TRACE,

        FUNCTION_EXIT_WRITE_SQL,
        FUNCTION_EXIT_WRITE_SQL_RECORDKEEPING,
        FUNCTION_EXIT_WRITE_SQL_BIND,
        FUNCTION_EXIT_WRITE_SQL_EXECUTE,

        BUILTIN_ENTRY_RECORDER,
        BUILTIN_ENTRY_STACK,
        BUILTIN_ENTRY_WRITE_SQL,
        BUILTIN_ENTRY_WRITE_SQL_RECORDKEEPING,
        BUILTIN_ENTRY_WRITE_SQL_BIND,
        BUILTIN_ENTRY_WRITE_SQL_EXECUTE,
        BUILTIN_ENTRY_WRITE_TRACE,

        BUILTIN_EXIT_RECORDER,
        BUILTIN_EXIT_STACK,
        BUILTIN_EXIT_WRITE_SQL,
        BUILTIN_EXIT_WRITE_SQL_RECORDKEEPING,
        BUILTIN_EXIT_WRITE_SQL_BIND,
        BUILTIN_EXIT_WRITE_SQL_EXECUTE,
        BUILTIN_EXIT_WRITE_TRACE,

        CREATE_PROMISE_RECORDER,
        CREATE_PROMISE_WRITE_SQL,
        CREATE_PROMISE_WRITE_SQL_BIND,
        CREATE_PROMISE_WRITE_SQL_EXECUTE,
        CREATE_PROMISE_WRITE_TRACE,

        FORCE_PROMISE_ENTRY_RECORDER,
        FORCE_PROMISE_ENTRY_STACK,
        FORCE_PROMISE_ENTRY_WRITE_SQL,
        FORCE_PROMISE_ENTRY_WRITE_SQL_RECORDKEEPING,
        FORCE_PROMISE_ENTRY_WRITE_SQL_BIND,
        FORCE_PROMISE_ENTRY_WRITE_SQL_EXECUTE,
        FORCE_PROMISE_ENTRY_WRITE_TRACE,

        FORCE_PROMISE_EXIT_RECORDER,
        FORCE_PROMISE_EXIT_STACK,
        FORCE_PROMISE_EXIT_WRITE_SQL,
        FORCE_PROMISE_EXIT_WRITE_SQL_BIND,
        FORCE_PROMISE_EXIT_WRITE_SQL_EXECUTE,
        FORCE_PROMISE_EXIT_WRITE_SQL_RECORDKEEPING,
        FORCE_PROMISE_EXIT_WRITE_TRACE,

        LOOKUP_PROMISE_VALUE_RECORDER,
        LOOKUP_PROMISE_VALUE_WRITE_SQL,
        LOOKUP_PROMISE_VALUE_WRITE_SQL_BIND,
        LOOKUP_PROMISE_VALUE_WRITE_SQL_EXECUTE,
        LOOKUP_PROMISE_VALUE_WRITE_TRACE,

        LOOKUP_PROMISE_EXPRESSION_RECORDER,
        LOOKUP_PROMISE_EXPRESSION_WRITE_SQL,
        LOOKUP_PROMISE_EXPRESSION_WRITE_SQL_BIND,
        LOOKUP_PROMISE_EXPRESSION_WRITE_SQL_EXECUTE,
        LOOKUP_PROMISE_EXPRESSION_WRITE_TRACE,

        LOOKUP_PROMISE_ENVIRONMENT_RECORDER,
        LOOKUP_PROMISE_ENVIRONMENT_WRITE_SQL,
        LOOKUP_PROMISE_ENVIRONMENT_WRITE_TRACE,

        SET_PROMISE_VALUE_RECORDER,
        SET_PROMISE_VALUE_WRITE_SQL,
        SET_PROMISE_VALUE_WRITE_TRACE,

        SET_PROMISE_EXPRESSION_RECORDER,
        SET_PROMISE_EXPRESSION_WRITE_SQL,
        SET_PROMISE_EXPRESSION_WRITE_TRACE,

        SET_PROMISE_ENVIRONMENT_RECORDER,
        SET_PROMISE_ENVIRONMENT_WRITE_SQL,
        SET_PROMISE_ENVIRONMENT_WRITE_TRACE,

        GC_PROMISE_UNMARKED_RECORDER,
        GC_PROMISE_UNMARKED_WRITE_SQL,
        GC_PROMISE_UNMARKED_RECORD_KEEPING,

        GC_FUNCTION_UNMARKED_RECORD_KEEPING,

        GC_ENTRY_RECORDER,
        GC_ENTRY_WRITE_SQL,

        GC_EXIT_RECORDER,
        GC_EXIT_WRITE_SQL,
        GC_EXIT_WRITE_SQL_BIND,
        GC_EXIT_WRITE_SQL_EXECUTE,

        VECTOR_ALLOC_RECORDER,
        VECTOR_ALLOC_WRITE_SQL,
        VECTOR_ALLOC_WRITE_SQL_BIND,
        VECTOR_ALLOC_WRITE_SQL_EXECUTE,

        NEW_ENVIRONMENT_RECORDER,
        NEW_ENVIRONMENT_WRITE_SQL,
        NEW_ENVIRONMENT_WRITE_SQL_BIND,
        NEW_ENVIRONMENT_WRITE_SQL_EXECUTE,
        NEW_ENVIRONMENT_WRITE_TRACE,

        CONTEXT_ENTRY_STACK,
        CONTEXT_JUMP_STACK,
        CONTEXT_JUMP_WRITE_SQL,
        CONTEXT_JUMP_WRITE_SQL_BIND,
        CONTEXT_JUMP_WRITE_SQL_EXECUTE,
        CONTEXT_JUMP_WRITE_SQL_RECORDKEEPING,
        CONTEXT_EXIT_STACK,

        PROMISE_LIFECYCLE_WRITE_SQL_BIND,
        PROMISE_LIFECYCLE_WRITE_SQL_EXECUTE,

        ENVIRONMENT_ACTION_RECORDER,
        ENVIRONMENT_ACTION_WRITE_SQL,
        ENVIRONMENT_ACTION_WRITE_SQL_BIND,
        ENVIRONMENT_ACTION_WRITE_SQL_EXECUTE,
        ENVIRONMENT_ACTION_WRITE_TRACE,

        number_of_segments
    };

    enum timer {
        MAIN = 0,
        RECORDER,
        SQL,
        number_of_timers

    };

    class Timer {
    private:
        timer name;
        long timers[number_of_segments] = {};
        long occurances[number_of_segments] = {};
        std::chrono::time_point<std::chrono::high_resolution_clock> start_time;

    public:
        Timer(timer t) : name(t) {};

        void start();
        void reset();
        void zero();
        void endSegment(segment s);
        std::vector<std::pair<std::string, std::string>> stats();

        //Timer(Timer const&) = delete;
        void operator=(Timer const&) = delete;

        static Timer& getInstance(timer name) {
            static Timer instances[] = {
                    Timer(MAIN),
                    Timer(RECORDER),
                    Timer(SQL)
            };
            return instances[name];
        }
    };
}


#endif //PROMISEDYNTRACER_TIMER_H
